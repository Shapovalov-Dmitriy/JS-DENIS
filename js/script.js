"use strict";

// === Коментарии ===========

// Однострочный коментарий

/*
Многострочный коментарий
*/

/**
 * JSDock коментарий
 */

// ========= Типы данных ===============
/**
 * 1.Примитивные
 * -Number(число): 2024, 1.5, NaN(Не число или не математическая операция), Infinity (безконечность);
 * -String(строка): 'Hello', "hello".`Hello`;
 * -Boolean(булевый тип): true(истина), false(ложь);
 * -Null: null (Значение не известно "значения нет");
 * -Undefined: undefined (Переменная существует, но не имеет значения);
 * -Symbol(): Symbol() - уникальный идентификатор;
 */

/**
 * 2.Объекты (Reference type) ссылочный тип "передаются по ссылке".
 * - Object: {name: 'Dmitriy', age: 39}; (Объект)
 *  * Array: [1, 2 ,3]; (Массив);
 *  * Function: function foo() {}; (Функция);
 *  * Date: new date(); (Дата)
 */

// =============== Переменные ================
// var, let, const
// var утаревшее обьявление переменной. НЕ ИСПОЛЬЗУЕТСЯ!!!
/**
 * Имя переменной не омжет начинаться с числа (будет ошибка синтаксиса).
 * Имя переменной должно отображать смысл содержания переменной.
 * Существует список зарезервированных слов, которые нельзя использовать для переменных, так как они используются самим языком, например: var, class, return, export и др.
 *
 * Стили именования переменной
 * camelCase - Верблюжий стиль: это когда каждое слово кроме первого начинается с заглавной буквы. (userName)
 * underscore - Это когда между словами ствится нижнее подчеркивание (user_name)
 */

// console.log(...); Выводит вконсоль браузера значение переменной или выражения.
// console.clear(); Очищает консоль и не выводит ничего, что было записано до него.

/**
 * Переменная let
 * Нельзя обьявить два и более раз переменную с одинаковым именем.
 * Не всплывает "нельзя получить значение переменной до ее обьявления".
 * Блочная видимость.
 * Можно переопределить значение переменной
 * Можно инициализировать (объявить) без значения.
 */

/**
 * Переменная const
 * Нельзя обьявить два и более раз переменную с одинаковым именем.
 * Не всплывает "нельзя получить значение переменной до ее обьявления".
 * Блочная видимость.
 * Нельзя переопределить значение константы
 * Можно переопределить ключь:значение обьекта, если в константе объект или массив.
 * Нельзя инициализировать (объявить) без значения.
 */

/*
let userName = "Dima"; // объявление переменной и присваивание ей значения.
console.log(userName); // Вывод значения переменной в консоль.

userName = "Ivan"; // Переопределение значения переменной (можно заменить и на другой тип данных).
console.log(userName); // Вывод значения переменной в консоль с новым значением.

let someName = userName // Копирование переменной. (Присваивание значения одной переменной в другую).

let age; //Можно обьявить переменную без значения, а задать его дальше в коде.
age = 39;// Переопределение значения переменной (можно заменить и на другой тип данных).
console.log(age);// Вывод значения переменной в консоль с новым значением.
*/

// ============== Преобразование типов дынных =============
/*
let value;
let num;
// ===== Явное преобразование =====
//  Число в строку ========
num = 10; // Сейчас в переменной содержится число 10.

value = String(num); // Теперь в переменной содержтся уже строка "10".
value = String(num + 40); // Можно выполнять математические операции.
value = (num).toString(); // если запись через точку, то это уже метод "в строку".Так же преобразует число в строку. В первые ковычки можно вставлять переменную содержащую число.
console.clear();

// Строка в число ========

let str = '20'; // Сейчас в переменной содержится строка 20.

value = Number(str); // Теперь в переменной содержтся уже число "20".
value = Number(true); // true имеет значение число "1".
value = Number(false); // false имеет значение число "0".
value = Number(null); // null имеет значение число "0".
value = Number("string"); // NaN.
value = Number([1, 2, 3]); // NaN.

// parseInt служит для целых чисел
value = parseInt('200'); // Число 200.
value = parseInt('200попугаев'); // Все равно выведет только число 200.
value = parseInt('всего200попугаев'); // Выведет NaN.

// parseFloat служит для дробных чисел
value = parseFloat('200.2323'); // Число 200.2323.

// console.log(value);
// console.log(typeof value);

//  Boolean в строку

let boolean = true; // Булевое значение true (истина).
value = String(boolean); // Строка "true". Тоже саме будет со значением false.

//  ПРеобразование в Boolean ========

value = Boolean("Dima"); //true
value = Boolean(" "); // Даже если в строке есть пробел, будет true.
value = Boolean(""); // false
value = Boolean(100); // true
value = Boolean(-100); // true
value = Boolean(0); // false
value = Boolean(undefined); // false
value = Boolean(null); // false
value = Boolean({}); // true
value = Boolean([]); // true

// console.log(value);
// console.log(typeof value);

//  Массив в строку =========
let arr = [1, 2, 3];

value = String(arr); // Получим данные массива записанные в строку "1, 2, 3".
*/
// Объект в строку ========

// Объект Нельзя преобразовать в строку.
/*
console.log(value);
console.log(typeof value);
*/

// =====================================
// ===== Не явное преобразование =====
// Все математические операторы - * / , кроме (+) стремятся преобразовать результат к числу.
// Конкатенация (сложение чего либо со строкой).
// Не явное преобразование в строку. =======
/*
value = 10 + '10'; // Выведет строку 1010.
value = 10 + '10' + 30; // Выведет строку 101030.

value = num + str; // Выведет строку 1020.

// Не явное преобразование в число =======
value = 10 - "10"; // Число 0.
value = 10 - "30"; // Число -20.
value = 10 - "" // Число 10.
value = 10 - " " // Число 10.
value = 10 - "Number" // NaN. Любое математическое действие со строкой кроме (+) выведет NaN.Опреация не может быть выполнена, так-как второй операнд НЕ ЧИСЛО.
value = true + 10; // число 11. "true = 1".
value = false + 10; // Число 10. "false = 0".
value = null + 10; // Число 10. "null = 0".
value = false + undefined; // NaN. undefined при математических действиях, кроме сложения со строкой, будет преобразовываться к NaN.

console.log(value);
console.log(typeof value);
*/

// =============== Числа ==================
const num1 = 10,
  num2 = 20;

let value;

// - + * /
/*
value = num1 + num2; // Сложение значений переменных.
value = value + 100; // Прибавить 100 к текущему значению переменной.
value += 100; // Прибавить 100 к текущему значению переменной с присвоением.
value -= 100; // Отнять 100 к текущему значению переменной с присвоением.
value *= 100; // умножить 100 к текущему значению переменной с присвоением.
value /= 100; // разделить 100 к текущему значению переменной с присвоением.
console.log(value);
*/
/**
 * // Взятие остатка от деления %
 * value = 4 % 2; // 0
 * value = 5 % 2; // 1
 * console.log(value);
 */

// Инкремент и Дикремент
/*
value = 10;
// Постфиксная форма (сначала вернет старое значение, на следующей строке произойдет действие).
value++ // Инкремент Прибавляет на еденицу. 
value-- // Дикремент Уменьшает на еденицу.

// Префиксная форма (дейсткие произойдет сразу, на этойже строке ).
++value // Инкремент Прибавляет на еденицу. 
--value // Дикремент Уменьшает на еденицу.
console.log(value);
*/

// Не точные вычесления ================
value = 0.6 + 0.7;

console.log(value);













